import pandas as pd 
df=pd.read_csv('BankingDataset.csv')
print(df)
print(df['default'].value_counts())
print(df['loan'].value_counts())
print(df['housing'].value_counts())

# check missing values
df.isna().sum()
# check redundancy
df.duplicated()
# check incosistency
print(df.dtypes)
# remove unknown values from default , housing and loan columns
df.drop(df[df['housing'] == 'unknown'].index, inplace=True)
df.drop(df[df['loan'] == 'unknown'].index, inplace=True)
df.drop(df[df['default'] == 'unknown'].index, inplace=True)
print(df)

from sklearn import preprocessing
# Import label encoder
label_encoder = preprocessing.LabelEncoder()
# Encode labels into numbers (for some columns)
df['marital'] = label_encoder.fit_transform(df['marital'])
df['marital'].unique()

df['job'] = label_encoder.fit_transform(df['job'])
df['job'].unique()

df['education'] = label_encoder.fit_transform(df['education'])
df['education'].unique()

df['default'] = label_encoder.fit_transform(df['default'])
df['default'].unique()

df['housing'] = label_encoder.fit_transform(df['housing'])
df['housing'].unique()

df['loan'] = label_encoder.fit_transform(df['loan'])
df['loan'].unique()

df['contact'] = label_encoder.fit_transform(df['contact'])
df['contact'].unique()

df['month'] = label_encoder.fit_transform(df['month'])
df['month'].unique()

df['day_of_week'] = label_encoder.fit_transform(df['day_of_week'])
df['day_of_week'].unique()

df['poutcome'] = label_encoder.fit_transform(df['poutcome'])
df['poutcome'].unique()

df['y'] = label_encoder.fit_transform(df['y'])
df['y'].unique()
print(df)
print(df.dtypes)
df.drop(['default'],axis=1,inplace=True)
print(df)
# =============================================================================
import numpy as np 
import matplotlib.pyplot as plt
import warnings
import plotly.express as px 
warnings.filterwarnings('ignore')
print(df.shape)
print("////////////////////////////////////////////")
# Removing the outliers
def removeOutliers(data, col):
    Q3 = np.quantile(data[col], 0.75)
    Q1 = np.quantile(data[col], 0.25)
    IQR = Q3 - Q1
 
    print("IQR value for column %s is: %s" % (col, IQR))
    global outlier_free_list
    global filtered_data
 
    lower_range = Q1 - 1.5 * IQR
    upper_range = Q3 + 1.5 * IQR
    outlier_free_list = [x for x in data[col] if (
        (x > lower_range) & (x < upper_range))]
    filtered_data = data.loc[data[col].isin(outlier_free_list)]
    print(col)
    print("*"*50)
    print(filtered_data)
   # return(filtered_data)
   
for i in['age', 'job', 'marital', 'education', 'housing','contact',
         'month', 'day_of_week', 'duration', 'campaign']:
    if i == df.columns[0]:
      removeOutliers(df, i)
    else:
      removeOutliers(filtered_data, i) 
    print("*"*100)
    
print("=============================")     
# Assigning filtered data back to our original variable
print(filtered_data.shape)
###################################################################################
#summarize the data 
filtered_data.describe()
age_IQR = filtered_data.age.describe()['75%'] - filtered_data.age.describe()['25%']
print ("Age IQR : ", age_IQR)
duration_IQR = filtered_data.duration.describe()['75%'] - filtered_data.duration.describe()['25%']
print ("Duration IQR : ", duration_IQR)
#visualization 
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
#histogram for column Y (target)
plt.hist(filtered_data.y,color='blue')
plt.xlabel("X-axis")
plt.ylabel("Y-axis")
plt.title('Y(has the client subscribed a term deposit?)')
#BoxPLot for duration
plt.boxplot(filtered_data.duration,notch=True,vert=False)

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
######################################VISUALIZATION##########################################
sns.histplot(data=filtered_data, x='age', hue='y', kde=True)
plt.title('Subscription Status by Age')
plt.xlabel('Age')
plt.ylabel('Count')
plt.show()
#################################
housing_counts = df['housing'].value_counts()
plt.pie(housing_counts, labels=housing_counts.index, autopct='%1.1f%%', startangle=90)
plt.axis('equal')
plt.title('Housing Loan by Subscription Status')
plt.legend(title='Subscription Status', loc='best', bbox_to_anchor=(1, 0, 0.5, 1))
plt.show()
##################################
loan_counts = df['loan'].value_counts()
plt.pie(loan_counts, labels=loan_counts.index, autopct='%1.1f%%', startangle=90)
plt.axis('equal')
plt.title('Personal Loan by Subscription Status')
plt.legend(title='Subscription Status', loc='best', bbox_to_anchor=(1, 0, 0.5, 1))
plt.show()
#################################
# Create a crosstab of 'campaign' and 'y'
campaign_y_counts = pd.crosstab(filtered_data['campaign'], filtered_data['y'])
# Create the heatmap
sns.heatmap(campaign_y_counts, annot=True, fmt='d', cmap='Blues')
plt.title('Subscription Status by Number of Contacts')
plt.xlabel('Subscription Status')
#################################
#boxplot
plt.figure(figsize=(10,6))
sns.boxplot(data=filtered_data, x='y', y='duration')
plt.title('Subscription Status by Call Duration')
plt.xlabel('Subscription Status')
plt.ylabel('Call Duration (seconds)')
plt.show()
#################################
# Create a stacked bar plot
# Create a DataFrame with 'contact' and 'y'
contact_y_df = df[['contact', 'y']]
# Create a crosstab of 'contact' and 'y'
contact_y_counts = pd.crosstab(contact_y_df['contact'], contact_y_df['y'])
# Create a stacked bar plot
contact_y_counts.plot(kind='bar', stacked=True)
plt.title('Subscription Status by Contact Type')
plt.xlabel('Contact Type')
plt.ylabel('Count')
plt.legend(title='Subscription Status', labels=['cellular', 'telephone'])
plt.show()