import pandas as pd
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Load data
data = pd.read_csv('Churn_Modelling.csv')

# Preprocessing
data = data.dropna()

data['Age'].fillna(data['Age'].median(), inplace=True)

gender_mapping = {'Male': 1, 'Female': 0}
data['Gender'] = data['Gender'].map(gender_mapping)

label_encoder = LabelEncoder()
data['Geography'] = label_encoder.fit_transform(data['Geography'])

selected_features = ['CreditScore', 'Age', 'Balance', 'NumOfProducts']
X = data[selected_features]

X = data.drop(['Exited', 'RowNumber', 'CustomerId', 'Surname'], axis=1)
y = data['Exited']

# Feature Scaling
scaler = StandardScaler()
numerical_cols = ['CreditScore', 'Age', 'Balance', 'EstimatedSalary']
X[numerical_cols] = scaler.fit_transform(X[numerical_cols])

# Splitting the dataset into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize the Random Forest Classifier and Logistic Regression
rf_classifier = RandomForestClassifier(n_estimators=100, random_state=42)
logistic_regression = LogisticRegression(max_iter=1000)

# Train the classifiers
rf_classifier.fit(X_train, y_train)
logistic_regression.fit(X_train, y_train)

# Predict on the test set
predictions = rf_classifier.predict(X_test)
predictions2 = logistic_regression.predict(X_test)

# Evaluate the models
accuracy = accuracy_score(y_test, predictions)
print(f"Random Forest Accuracy: {accuracy:.2f}")

accuracy2 = accuracy_score(y_test, predictions2)
print(f"Logistic Regression Accuracy: {accuracy2:.2f}")

# Hyperparameter Tuning using GridSearchCV for Random Forest
param_grid = {
    'n_estimators': [100, 200, 300],
    'max_depth': [None, 5, 10, 15],
    'min_samples_split': [2, 5, 10]
}

grid_search = GridSearchCV(estimator=RandomForestClassifier(random_state=42),
                           param_grid=param_grid,
                           cv=5,
                           scoring='accuracy',
                           n_jobs=-1)

grid_search.fit(X_train, y_train)

best_params = grid_search.best_params_
print("Best Parameters:", best_params)

best_rf_classifier = grid_search.best_estimator_
best_predictions = best_rf_classifier.predict(X_test)
best_accuracy = accuracy_score(y_test, best_predictions)
print(f"Best Random Forest Accuracy: {best_accuracy:.2f}")

# Print classification report and confusion matrix for Random Forest
print("\nRandom Forest Classification Report:")
print(classification_report(y_test, predictions))

print("\nRandom Forest Confusion Matrix:")
print(confusion_matrix(y_test, predictions))