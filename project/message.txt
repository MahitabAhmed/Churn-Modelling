import pandas as pd 
df=pd.read_csv('D:\AnalyticsTask\AnalyticsTask\BankingDataset.csv')
print(df)
# check missing values
df.isna().sum()
# check redundancy
df.duplicated()
# check incosistency
print(df.dtypes)
# remove unknown values from default , housing and loan columns
df.drop(df[df['housing'] == 'unknown'].index, inplace=True)
df.drop(df[df['loan'] == 'unknown'].index, inplace=True)
df.drop(df[df['default'] == 'unknown'].index, inplace=True)
print(df)

from sklearn import preprocessing
# Import label encoder
label_encoder = preprocessing.LabelEncoder()
# Encode labels into numbers (for some columns)
df['marital'] = label_encoder.fit_transform(df['marital'])
df['marital'].unique()

df['job'] = label_encoder.fit_transform(df['job'])
df['job'].unique()

df['education'] = label_encoder.fit_transform(df['education'])
df['education'].unique()

df['default'] = label_encoder.fit_transform(df['default'])
df['default'].unique()

df['housing'] = label_encoder.fit_transform(df['housing'])
df['housing'].unique()

df['loan'] = label_encoder.fit_transform(df['loan'])
df['loan'].unique()

df['contact'] = label_encoder.fit_transform(df['contact'])
df['contact'].unique()

df['month'] = label_encoder.fit_transform(df['month'])
df['month'].unique()

df['day_of_week'] = label_encoder.fit_transform(df['day_of_week'])
df['day_of_week'].unique()

df['poutcome'] = label_encoder.fit_transform(df['poutcome'])
df['poutcome'].unique()

df['y'] = label_encoder.fit_transform(df['y'])
df['y'].unique()
print(df)
print(df.dtypes)
########################################################################
#another way to convert to numbers
#df['marital']=df['marital'].map({'married':2,'single':1,'divorced':0})
#df['default']=df['default'].map({'yes':1,'no':0})
#df['housing']=df['housing'].map({'yes':1,'no':0})
#df['loan']=df['loan'].map({'yes':1,'no':0})
#########################################################################
import numpy as np 
import matplotlib.pyplot as plt
import warnings
import plotly.express as px 
warnings.filterwarnings('ignore')

def traditional_outlier(df,x):
   q1 = df[x].quantile(.25)
   q3 = df[x].quantile(.75)
   iqr = q3 - q1
   df['traditional'] = np.where(df[[x]] < (q1 - 1.5*iqr),-1, 
                          np.where(df[[x]] > (q1 + 1.5*iqr),-1,1))
   return df
traditional_outlier(df,'job')
traditional_outlier(df,'marital')
traditional_outlier(df,'education')
traditional_outlier(df,'default')
traditional_outlier(df,'housing')
traditional_outlier(df,'loan')
traditional_outlier(df,'contact')
traditional_outlier(df,'month')
traditional_outlier(df,'day_of_week')
traditional_outlier(df,'duration')
traditional_outlier(df,'campaign')
traditional_outlier(df,'pdays')
traditional_outlier(df,'previous')
traditional_outlier(df,'poutcome')
traditional_outlier(df,'y')