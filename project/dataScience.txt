```pythonimport pandas as pd

from sklearn.preprocessing import LabelEncoder

from sklearn.preprocessing import StandardScaler

from sklearn.preprocessing import StandardScaler

from sklearn.model_selection import train_test_split


from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

load data 

data = pd.read_csv('Churn_Modelling.csv')

data.head()

preprocessing


drop nulls

data = data.dropna()

fill missing values with mean, median, or mode

data['Age'].fillna(data['Age'].median(), inplace=True)

Encoding Categorical Variables:

X = pd.get_dummies(X)

gender_mapping = {'Male': 1, 'Female': 0}
data['Gender'] = data['Gender'].map(gender_mapping)

selected_features = ['CreditScore', 'Age', 'Balance', 'NumOfProducts']
X = data[selected_features]

X = data.drop(['Exited', 'RowNumber', 'CustomerId', 'Surname'], axis=1)
y = data['Exited']

Feature Scaling:

scaler = StandardScaler()
numerical_cols = ['CreditScore', 'Age', 'Balance', 'EstimatedSalary']

X.head(30)

 Splitting the dataset into train and test sets:

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

 Initialize the Random Forest Classifier and logistic_regression

rf_classifier = RandomForestClassifier(n_estimators=100, random_state=42)

logistic_regression = LogisticRegression(max_iter=1000)


Train the classifiers

rf_classifier.fit(X_train, y_train)

logistic_regression.fit(X_train, y_train)

 Predict on the test set

predictions = rf_classifier.predict(X_test)

predictions2 = logistic_regression.predict(X_test)

Evaluate the models

accuracy = accuracy_score(y_test, predictions)
print(f"Accuracy: {accuracy:.2f}")


accuracy2 = accuracy_score(y_test, predictions2)
print(f"Accuracy: {accuracy2:.2f}")

Print classification report and confusion matrix

print("\nClassification Report:")
print(classification_report(y_test, predictions))

print("\nClassification Report:")
print(classification_report(y_test, predictions2))

print("\nConfusion Matrix:")
print(confusion_matrix(y_test, predictions))```